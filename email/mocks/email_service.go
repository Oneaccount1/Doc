// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "refatorSiwu/domain"
)

// EmailService is an autogenerated mock type for the EmailService type
type EmailService struct {
	mock.Mock
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *EmailService) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: ctx, email
func (_m *EmailService) Send(ctx context.Context, email *domain.Email) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBatch provides a mock function with given fields: ctx, emails
func (_m *EmailService) SendBatch(ctx context.Context, emails []*domain.Email) error {
	ret := _m.Called(ctx, emails)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*domain.Email) error); ok {
		r0 = rf(ctx, emails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendWithTemplate provides a mock function with given fields: ctx, to, subject, template, data
func (_m *EmailService) SendWithTemplate(ctx context.Context, to string, subject string, template string, data map[string]interface{}) error {
	ret := _m.Called(ctx, to, subject, template, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, to, subject, template, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailService creates a new instance of EmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailService {
	mock := &EmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
