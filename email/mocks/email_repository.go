// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
	domain "refatorSiwu/domain"
)

// EmailRepository is an autogenerated mock type for the EmailRepository type
type EmailRepository struct {
	mock.Mock
}

// BatchUpdateStatus provides a mock function with given fields: ctx, ids, status
func (_m *EmailRepository) BatchUpdateStatus(ctx context.Context, ids []int64, status domain.EmailStatus) error {
	ret := _m.Called(ctx, ids, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, domain.EmailStatus) error); ok {
		r0 = rf(ctx, ids, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountByRecipientID provides a mock function with given fields: ctx, recipientID
func (_m *EmailRepository) CountByRecipientID(ctx context.Context, recipientID int64) (int64, error) {
	ret := _m.Called(ctx, recipientID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, recipientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, recipientID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, recipientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByStatus provides a mock function with given fields: ctx, status
func (_m *EmailRepository) CountByStatus(ctx context.Context, status domain.EmailStatus) (int64, error) {
	ret := _m.Called(ctx, status)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmailStatus) (int64, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmailStatus) int64); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.EmailStatus) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EmailRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOldEmails provides a mock function with given fields: ctx, olderThan
func (_m *EmailRepository) DeleteOldEmails(ctx context.Context, olderThan time.Time) error {
	ret := _m.Called(ctx, olderThan)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, olderThan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *EmailRepository) GetByID(ctx context.Context, id int64) (*domain.Email, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.Email, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Email); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByRecipientID provides a mock function with given fields: ctx, recipientID, offset, limit
func (_m *EmailRepository) ListByRecipientID(ctx context.Context, recipientID int64, offset int, limit int) ([]*domain.Email, error) {
	ret := _m.Called(ctx, recipientID, offset, limit)

	var r0 []*domain.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]*domain.Email, error)); ok {
		return rf(ctx, recipientID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) []*domain.Email); ok {
		r0 = rf(ctx, recipientID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = rf(ctx, recipientID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByStatus provides a mock function with given fields: ctx, status, offset, limit
func (_m *EmailRepository) ListByStatus(ctx context.Context, status domain.EmailStatus, offset int, limit int) ([]*domain.Email, error) {
	ret := _m.Called(ctx, status, offset, limit)

	var r0 []*domain.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmailStatus, int, int) ([]*domain.Email, error)); ok {
		return rf(ctx, status, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmailStatus, int, int) []*domain.Email); ok {
		r0 = rf(ctx, status, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.EmailStatus, int, int) error); ok {
		r1 = rf(ctx, status, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByType provides a mock function with given fields: ctx, emailType, offset, limit
func (_m *EmailRepository) ListByType(ctx context.Context, emailType domain.EmailType, offset int, limit int) ([]*domain.Email, error) {
	ret := _m.Called(ctx, emailType, offset, limit)

	var r0 []*domain.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmailType, int, int) ([]*domain.Email, error)); ok {
		return rf(ctx, emailType, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.EmailType, int, int) []*domain.Email); ok {
		r0 = rf(ctx, emailType, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.EmailType, int, int) error); ok {
		r1 = rf(ctx, emailType, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFailedEmails provides a mock function with given fields: ctx, limit
func (_m *EmailRepository) ListFailedEmails(ctx context.Context, limit int) ([]*domain.Email, error) {
	ret := _m.Called(ctx, limit)

	var r0 []*domain.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*domain.Email, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*domain.Email); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPendingEmails provides a mock function with given fields: ctx, limit
func (_m *EmailRepository) ListPendingEmails(ctx context.Context, limit int) ([]*domain.Email, error) {
	ret := _m.Called(ctx, limit)

	var r0 []*domain.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*domain.Email, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*domain.Email); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, email
func (_m *EmailRepository) Store(ctx context.Context, email *domain.Email) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, email
func (_m *EmailRepository) Update(ctx context.Context, email *domain.Email) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailRepository creates a new instance of EmailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailRepository {
	mock := &EmailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
